# 1. Install docker and docker-compose on a linux server;
# 2. On the server, create a folder e-ratos and copy there docker-compose.yaml and create folders database, sql and redis inside it;
# 2.1 On the server, put sql scripts to init the DB into folder sql (docker will execute all the files with .sql extension);
# 3. Being inside folder ratos3 invoke the following command: docker-compose up -d
# 4. Wait until the app is up (check /department or /session/start?schemeId=1).

version: '3.1'

services:

  ratos_db:
    container_name: ratos_db
    image: mysql:8.0.36
    restart: always
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_0900_ai_ci
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
      - MYSQL_DATABASE=${DATABASE_NAME}
      - MYSQL_USER=${DATABASE_USER}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - ./database:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d

  redis_db:
    container_name: redis_db
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/redis.conf
    command: [ "redis-server", "/redis.conf" ]

  ratos_app:
    container_name: ratos_app
    depends_on:
      ratos_db:
        condition: service_started
      redis_db:
        condition: service_started
    image: gelever85/ratos3:latest
    restart: always
    ports:
      - "80:8080"
    environment:
      - DATABASE_HOST=ratos_db
      - SERVER_PORT=${SERVER_PORT} # Environment reference for server port
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_PORT=${DATABASE_PORT}
      - REDIS_HOST=redis_db
      - REDIS_SECRET=${REDIS_SECRET}
      - REDIS_PORT=${REDIS_PORT}
      - SPRING_ACTIVE_PROFILE=${SPRING_ACTIVE_PROFILE}
      - SPRING_CACHE_TYPE=${SPRING_CACHE_TYPE} # Specify cache type options: {none, simple, caffeine, redis}
      - SPRING_SESSION_STORE_TYPE=${SPRING_SESSION_STORE_TYPE} # Should we use some specific store type for backing HttpSession? {none, redis}
      - SERVLET_SESSION_TIMEOUT=${SERVLET_SESSION_TIMEOUT} # Specify standard http session time-out (must be reasonably long, imagine scenario of 200 questions and 1 min per question)!
      - TOMCAT_MAX_THREADS=${TOMCAT_MAX_THREADS} # Specify the number of threads in Tomcat thread pool (default value is 200);
      - HIBERNATE_ENABLE_2LC=${HIBERNATE_ENABLE_2LC} # Should we enable Hibernate's 2-d level cache? (EH Cache is used  as impl.)
      - RATOS_INIT_CACHE=${RATOS_INIT_CACHE} # Populate cache on start-up {NONE, LARGE, LATEST, ALL}
      - RATOS_INIT_CACHE_THREADS=${RATOS_INIT_CACHE_THREADS} # If previous option, in how many threads we should populate cache on start-up; {CPU cores}
      - RATOS_SESSION_INCLUDE_GROUPS=${RATOS_SESSION_INCLUDE_GROUPS} # Whether we should take into account student groups when deciding if to allow access to a given schema? (TRUE/FALSE)
      - RATOS_SESSION_SHUFFLE_ENABLED=${RATOS_SESSION_SHUFFLE_ENABLED} # Whether we should shuffle answers each time? If true, randomizes answers of questions where possible? (TRUE/FALSE)
      - RATOS_SESSION_RANDOM_ALGORITHM=${RATOS_SESSION_RANDOM_ALGORITHM} # Algorithm to randomly pick up questions from DB {SIMPLE, CACHED, DECIDE}
      - RATOS_SESSION_PRESERVED_LIMIT=${RATOS_SESSION_PRESERVED_LIMIT} # Specify how many sessions can be preserved by a user in this installation of RATOS (ANY REASONABLE NUMBER)
      - RATOS_SESSION_STARRED_LIMIT=${RATOS_SESSION_STARRED_LIMIT} # Specify how many questions can be kept starred by a user in this installation of RATOS (ANY REASONABLE NUMBER)
      - RATOS_SESSION_SAVE_TIMEOUTED_RESULTS=${RATOS_SESSION_SAVE_TIMEOUTED_RESULTS} # Should we save to DB results of time-outed sessions? (TRUE/FALSE)
      - RATOS_SESSION_SAVE_CANCELLED_RESULTS=${RATOS_SESSION_SAVE_CANCELLED_RESULTS} # Should we save to DB results of cancelled sessions? (TRUE/FALSE)
      - RATOS_SESSION_SAVE_ABANDONED_RESULTS=${RATOS_SESSION_SAVE_ABANDONED_RESULTS} # Should we save to DB results of abandoned sessions? (TRUE/FALSE)
      - RATOS_SESSION_TIMEOUT_PENALTY=${RATOS_SESSION_TIMEOUT_PENALTY} # Specify the percent (%) of total batch score that will be distracted in case of batch/session time-out (0-100)
      - RATOS_SESSION_TIMEOUT_LEEWAY=${RATOS_SESSION_TIMEOUT_LEEWAY} # Specify the number of seconds that is used to compensate network round-trips between batch requests. (Experimental)
      - RATOS_RESULT_CLEAN_ON=${RATOS_RESULT_CLEAN_ON} # Whether we should clean the heavy result_details table with JSON serialised session details? (TRUE/FALSE)
      - RATOS_RESULT_PERIOD=${RATOS_RESULT_PERIOD} # If previous option, specify how often to clean the result_details table? {DAILY, WEEKLY, MONTHLY}
      - RATOS_SECURITY_LMS_REGISTRATION=${RATOS_SECURITY_LMS_REGISTRATION} # Should we allow students to do self-registration inside LMS? (TRUE/FALSE)
      - RATOS_SECURITY_NON_LMS_REGISTRATION=${RATOS_SECURITY_NON_LMS_REGISTRATION} # Should we allow students to do self-registration outside LMS? (TRUE/FALSE)
      - RATOS_LTI_LAUNCH_URL_FIX=${RATOS_LTI_LAUNCH_URL_FIX} # Whether we should replace https (requested) to http (actual) protocols? (TRUE/FALSE)
      - RATOS_LTI_LAUNCH_URL=${RATOS_LTI_LAUNCH_URL} # Specify full URL to be used by LMS
    volumes:
      - ./logs:/logs
